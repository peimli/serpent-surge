- name: Deploy Serpent Surge App with Backup Timer
  hosts: web
  become: true

  vars:
    letsencrypt_email: "zoltanpeimli23@gmail.com"
    domain_name: "serpent.surge.peimliz.pp.ua"
    db_user: "{{ db_user }}"
    db_password: "{{ db_password }}"
    db_name: "{{ db_name }}"
    rds_endpoint: "{{ rds_endpoint }}"
    s3_bucket_name: "{{ s3_bucket_name }}"
    table_name: "{{ table_name }}"

  tasks:
    - name: Remove conflicting Docker packages
      apt:
        name:
          - docker
          - docker-engine
          - docker.io
          - containerd
          - runc
        state: absent
        purge: yes
        force: yes

    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker APT repository
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu jammy stable
        state: present
        filename: docker

    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install Docker engine and dependencies
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - unzip
          - mysql-client
          - awscli
        state: present

    - name: Add user to docker group
      user:
        name: ubuntu
        groups: docker
        append: yes

    - name: Download legacy Docker Compose binary
      get_url:
        url: https://github.com/docker/compose/releases/download/1.29.2/docker-compose-Linux-x86_64
        dest: /usr/local/bin/docker-compose
        mode: '0755'

    - name: Ensure /opt/scripts exists
      file:
        path: /opt/scripts
        state: directory
        mode: '0755'

    - name: Copy docker-compose.yml
      template:
        src: docker-compose.yml.j2
        dest: /home/ubuntu/docker-compose.yml
        mode: '0644'

    - name: Copy backend code
      copy:
        src: ../docker/backend/
        dest: /home/ubuntu/backend/
        mode: '0755'

    - name: Copy frontend code
      copy:
        src: ../docker/frontend/
        dest: /home/ubuntu/frontend/
        mode: '0755'
   
    - name: Copy nginx SSL config
      template:
        src: nginx-ssl.conf.j2
        dest: /home/ubuntu/nginx.conf
        mode: '0644'
    
    - name: Stop and remove old containers
      shell: |
        docker stop $(docker ps -aq) || true
        docker rm $(docker ps -aq) || true

    - name: Ensure letsencrypt Docker volume exists
      command: docker volume create letsencrypt
      register: le_vol
      changed_when: "'already exists' not in le_vol.stdout"

    - name: Check if certificate already exists in letsencrypt volume
      shell: >
        docker run --rm -v letsencrypt:/etc/letsencrypt
        busybox sh -c
        'test -f /etc/letsencrypt/live/{{ domain_name }}/fullchain.pem'
      register: cert_present
      changed_when: false
      failed_when: false
  
    - name: Obtain initial Letâ€™s Encrypt cert (standalone, one-time)
      command: >
        docker run --rm
        -p 80:80
        -v letsencrypt:/etc/letsencrypt
        certbot/certbot certonly --standalone
        -d {{ domain_name }}
        --agree-tos -m {{ letsencrypt_email }}
        --non-interactive --keep-until-expiring
      when: cert_present.rc != 0

    - name: Wait until certificate files exist in letsencrypt volume
      shell: >
        docker run --rm -v letsencrypt:/etc/letsencrypt busybox
        sh -c 'test -f /etc/letsencrypt/live/{{ domain_name }}/fullchain.pem'
      register: have_cert
      retries: 15
      delay: 4
      until: have_cert.rc == 0

    - name: Start nginx SSL config
      copy:
        src: /home/ubuntu/nginx.conf
        dest: /home/ubuntu/nginx.conf
        remote_src: true
        mode: '0644'

    - name: Start containers
      shell: docker-compose -f /home/ubuntu/docker-compose.yml up -d --build --remove-orphans
      args:
        chdir: /home/ubuntu/

    - name: Wait for frontend container to be healthy/running
      shell: |
        docker inspect -f '{{"{{ .State.Running }}"}}' frontend
      register: fe_up
      retries: 10
      delay: 3
      until: fe_up.stdout == "true"

    - name: Test Nginx config inside container
      shell: docker-compose -f /home/ubuntu/docker-compose.yml exec -T frontend nginx -t
      args:
        chdir: /home/ubuntu/

    - name: Reload Nginx to pick up certificates
      shell: docker-compose -f /home/ubuntu/docker-compose.yml exec -T frontend nginx -s reload
      args:
        chdir: /home/ubuntu/

    - name: Create non-login user for backups
      user:
        name: serpentbackup
        system: yes
        shell: /usr/sbin/nologin
        create_home: no

    - name: Copy DB init script
      template:
        src: ../bash/01-create-database.sh.j2
        dest: /opt/scripts/01-create-database.sh
        mode: '0755'

    - name: Run DB init script
      command: /opt/scripts/01-create-database.sh

    - name: Ensure backup directories exist
      file:
        path: "{{ item }}"
        state: directory
        owner: serpentbackup
        group: serpentbackup
        mode: '0750'
      loop:
        - /var/backups/score
        - /var/backups/score/dumps
        - /var/backups/score/archives

    - name: Template backup script
      template:
        src: ../bash/backup-script.sh.j2
        dest: /opt/scripts/backup-script.sh
        owner: serpentbackup
        group: serpentbackup
        mode: '0750'

    - name: Create systemd service for backup
      copy:
        src: "{{ playbook_dir }}/../bash/backup-score.service"
        dest: /etc/systemd/system/backup-score.service
        mode: '0644'

    - name: Copy systemd timer
      copy:
        src: ../bash/backup-score.timer
        dest: /etc/systemd/system/backup-score.timer
        mode: '0644'

    - name: Reload systemd
      systemd:
        daemon_reload: yes

    - name: Enable and start backup timer
      systemd:
        name: backup-score.timer
        enabled: yes
        state: started
